Spiega che append può essere implementata in un'altra maniera ma che ha una complessità O(n^2), passiamo oltre...

...ma per i più curiosi

Perché non riscrivere append in questa maniera?

fun reverse(x) = if null(x) then nil
				 else reverse(tl(x)) @ [hd(x)]

Se la lista è vuota allora restituisci nil (null), altrimenti restituisci il reverse della testa appesa ad una lista che contiene solo la testa della lista passata.

Facciamo un esempio

reverse [1,2,3,4];
reverse [2,3,4] @ [1]
reverse [3,4] @ [2] @ [1]
reverse [4] @ [3] @ [2] @ [1]
reverse [] @ [4] @ [3] @ [2] @ [1]
reverse nil => ritorna nil

Computiamo [] @ [4] @ [3] @ [2] @ [1]

[4] @ [3] @ [2] @ [1]
[4,3] @ [2] @ [1]
[4,3,2] @ [1]

Notiamo che la seconda implementazione usa un solo argomento mentre la precedente ne usa due. Ma assumedo che la lunghezza di una lista L sia n, la funzione append è O(n) e reverse è eseguita n volte, quindi la complessità di questa implementazione è O(n^2).

ML ci permette di ri-scrivere, tramite l'utilizzo del mattern matching, la funzione length in questo modo:

fun length([]) = 0 | lenght(a::y) = 1 + lenght(y);

Nota che qui non viene utilizzato null, né le funzioni hd e tl.

Quindi possiamo riscrivere

fun append(x,z) = if null(x) then z
				  else hd(x)::append(tl(x),z);

come

fun	  length([]) = 0
	| length(a::y) = 1 + lenght(y);

In questo modo evitiamo di utilizzare altre funzioni

Pattern

Se abbiamo funzioni che prendono più di un argomento possiamo dichiararle in questo modo:

fun <name> <pattern> = <body>

dove <pattern> è un'espressione, formata da variabili, coppie o costruttori.

Ne abbiamo visto un esempio nella funzione lenght.

Dobbiamo fare attenzione che i pattern siano esaustivi.


\bigskip
Proviamo ad implementare una funzione che tolga dalla testa il valori ripetuti di un valore passato, ad esempio.

strip(1, [1,1,2,3,1,1]) = [2,3,1,1]

Nota che gli elementi in mezzo alla lista e alla fine della lista che corrispondono all'elemento dato, non vengono rimossi.

Prova a pensarci e poi guarda l'implementazione.

fun   strip(a,[])
	| strip (a, v::y) = if (a = b) then strip(a,y)
					else b::y

Qual è il funzionamento di questa funzione? Spiega a voce alta.

Il caso base prende in considerazione la lista vuota, in quel caso restituisco la lista vuota. Altrimenti se la funzione presenta un elemento ed una lista con una testa b ed una coda y allora facciamo un controllo, se l'elemento passato è uguale alla testa della lista allora chiamiamo ricorsivamente la funzione scartando -- di fatto -- la testa della lista, se il controllo non è soddisfatto allora restituiamo la testa e la coda della lista nel costruttore "::".

Funzionamento della funzione strip appena implementata

strip(1, [1,1,2,3,1,1])
strip(1, [1,2,3,1,1])
strip(1, [2,3,1,1])
[2,3,1,1]

La funzione appena creata è polimorfica. Vuol dire che può essere usata con qualsiasi tipo, nel caso in cui non la usassimo con numeri di tipo intero dovremmo però assicurarci che la lista sia uguale al tipo della quale stiamo controllando l'uguaglianza.

Ad esempio

strip("x", ["x","x","y","z"]) = ["y","z"]

\omissis

Binding names to values

val x = 2;
fun addx y = x + y;
addx 3;
val 5;
addx 3;

Cosa restituirà la seconda chiamata addx 3? Perché?

Merge

Scriviamo una funzione merge(L,M) che ritorni la lista ordinata contenente gli elementi di L ed M.

Come la implementiamo? Dobbiamo riordinare le due liste ed unirle.

Casi base:
	Se L è vuota, ritorna M
	Se M è vuota, ritorna L
Casi ricorsivi
	x = head(L), y = head(M)

	if (x < y) return x, Merge(tail(L),M)
	else return y, Merge(L,tail(M))

Quindi verrà implementata nel modo seguente

fun	  merge([],M) = M
	| merge(L,[]) = L
	| merge(x::xt, y::yt) =
		if (x < y) then
			x::merge(xt,y::yt)
		else
			y::merge(x::xt,yt)

Esempio di esecuzione

merge([1,3,5],[2,4,6])
val it = [1,2,3,4,5,6] : int list

Funzionamento della funzione merge (a manina)

merge([1,3,5],[2,4,6])

x = 1, xt = [3,5], y = 2, yt = [4,6]

x::merge(xt,y::yt)
1::merge([[3,5][2,4,6]])

y::merge(x::xt,yt)
1::2::merge([3,5],[4,6])

x::merge(xt,y::yt)
1::2::3::merge([5],[4,6])

y::merge(x::xt,yt)
1::2::3::4::merge([5],[6])

x::merge(xt,y::yt)
1::2::3::4::5::merge([],[6])

M
1::2::3::4::5::6::merge([],[])

M
1::2::3::4::5::6::[]
1::2::3::4::5::[6]
1::2::3::4::[5,6]
1::2::3::[4,5,6]
1::2::[3,4,5,6]
1::[2,3,4,5,6]
[1,2,3,4,5,6]

Split

Scriviamo una funzione split(L) che divide la lista in entrata in due liste in uscita, con quale criterio? Gli elementi dispari faranno parte della prima lista, mentre gli elementi pari faranno parte della seconda.

Casi base
	- Se L è vuota, allora ritorna due liste vuote
	- Se L ha un singolo elemento x, allora ritorna [x] e una lista vuota

Passo ricorsivo
	- I primi due elementi della lista si chiameranno a e b
	- Ritorna la lista (a::M, b::N)

split	  split(nil) = (nil,nil)
		| split([a]) = ([a],nil)
		| split(a::b::rest) =
			let
				val (M,N) = split(rest)
			in
				(a::M, b::N)
			end;

Esempio di esecuzione

split([1,2,3,4,5,6])
val it = ([1,3,5],[2,4]) : int list * int list

Funzionamento della funzione split (a manina)

split([1,2,3,4,5,6])

a = 1, b = 2, rest = [3,4,5]
(M, N) = split(rest) in (a::M, b::N) (*sostituzione*)
(M, N) = split([3,4,5]) in (1::M, 2::N)

split([3,4,5])
a = 3, b = 4, rest = [5]
(M', N') = split([5]) in (a::M', b::N')
(M', N') = split([5]) in (3::M', 4::N')

split([5]) = ([5], []) = (M', N')

(3::M', 4::N')
(3::[5], 4::[]) = ([3,5], [4]) = (M, N)

(1::M, 2::N) = (1::[3,5], 2::[4]) = ([1,3,5], [2,4])

Mergesort

Scriviamo una funzione mergeSort(L)

Casi basi
	- Se L è vuota o contiene un elemento, allora L è ordinata e mergeSort ritorna L

Casi ricorsivi
	- Se L ha due o più elementi, allra dividi la lista in M e N usando la funzione split e ricorsivamente ordina le due liste
	- Alla fine uniscile usando la funzione merge (che assume che le due liste siano già ordinate)

La funzione mergeSort è così implementata

fun	  mergeSort(nil) = nil
	| mergeSort([a]) = [a]
	| mergeSort(L) =
		let
			val(M,N) = split(L)
		in
			merge(mergeSort(M),mergeSort(N))
		end;

Esempio

mergeSort([3,6,5,7,2]);
val it = [2,3,5,6,7] : int list

Esempio di funzionamento

mergeSort([3,6,5,7,2]);

val(M,N) = split(L)...
M = [3,5,2], N = [6,7]	(*valori in posizioni dispari in M, pari in N*)
...in merge(mergeSort(M),mergeSort(N))
merge(mergeSort([3,5,2]),mergeSort([6,7]))

val(M,N) = split(L)...
M = [3,2], N = [5]
...in merge(mergeSort(M),mergeSort(N))
merge(mergeSort([3,2]),mergeSort([5]))

val(M,N) = split(L)...
M = [3], N = [2]
...in merge(mergeSort(M),mergeSort(N))
merge(mergeSort([3]),mergeSort([2]))	(*caso base*)

mergeSort([a]) = [a]
merge([3],[2])

Risaliamo le chiamte ricorsive

merge([3],[2])								= [3,2]
merge(mergeSort([3,2]),mergeSort([5]))		= [2,3,5]
merge(mergeSort([3,5,2]),mergeSort([6,7]))	= [2,3,5,6,7]

Curried functions (perché non è mai abbastanza)

Possiamo dichiarare funzioni che prendono più di un argomento ma tecnicamente, prendono un argomento, namely un tupla composta da 2 elementi, 3 elementi e così via.
Qualche volta è conveniente scrivere funzioni che prendono 1 un solo argomento in forma currificata (\foreign{curried form}).
Abbiamo esaminato questo aspetto quando abbiamo discusso di Lambda Calcolo.

Currying

Cos'è il currying?

Una qualsiasi funzione con n argomenti può essere scritta con una funzione con n - 1 argomenti, ricorsivamente, fino a non avere nessun argomento rimanente.

Questa tecnica si chiama \foreign{currying}.

Ad esempio

La somma fra 1 e 3 è scitta come 1 + 3.

In lambda calcolo scriviamo

(+ 1 3) oppure ((+ 1) + 3)

Al posto di vedere la funzione ``+'' come una funzione che prende in ingresso 2 argomenti, vediamo la funzione ``+'' come una funzione che prende in ingresso un argomento.

In questo particolare caso è una funzione ``+ 1'' che prende come \emph{unico} argomento 3, che somma al suo argomento attuale.

Linea di fondo è quella di riscrivere -- ricorsivamente -- una funzione che prende n argomenti come una funzione che prende n - 1 argomenti.

Un esempio

Per esprimere la forma currificata scriviamo il nome della funzione seguita dai suoi argomenti senza l'uso di parentesi.

Quindi al posto di scrivere

fun	  exponent1(x,0) = 1.0
	| exponent1(x,y) = x * exponent1(x, y-1)

val exponent1 = fn: real * int -> real

fun	  exponent2 x 0 = 1.0
	| exponent2 x y = x * exponent2 x (y - 1)

val exponent2 = fn real -> (int -> real)

Nota il valore che le funzioni assumono nelle due diverse implementazioni.
Nella forma non curryficata la funzione mappa un prodotto cartesiano fra le coppie reali ed interi su un intero, mentre nella forma curryficata la funzione restituisce un reale che mappa \emph{una funzione} che mappa interi in reali.

Tramite il curryng possiamo fare applicazioni parziali delle funzioni.
\'{E} possibile fare quindi la composizione di più funzioni.

YOUTUBE (onlineeducation19930)

fun pow(x : int, y : int) =
	if (x = 0) then
		1
	else
		x * pow(x, y-1)

fun cube(x : int) =
	pow(x, 3)

Introducing Lists

Le tuple sono immutabili, che sta a significare che durante l'esecuzione del programma non possono cambiare di dimensione, ma a loro discolpa possono contenere più tipi di dato al loro interno.

Mentre na lista può avere invece un qualsiasi numero di elementi che può essere cambiato a run-time, ma tutti gli elementi devono essere dello stesso tipo. Abbiamo quindi bisogno di un modo che permetta di costruire una lista ed accedere alle sue parti.

L'operatore ``::'' (che si pronunica cons) è un metodo per costruire una lista.
Come funziona?

e1::e2

L'operatore e1 viene valutato ad un valore v1 e e2 viene valutato ad una lista [v1,..., vn].

Nella pratica mette l'operatore e1 in testa alla lista.

Una operazione che non permessa è la seguente

[3]::x

dove x = [2,1].

Questo accade per un errore di type-check, in quanto stiamo cercando di mettere una lista in testa ad una lista di interi.

Quel che è possibile fare invece è mettere al lista [3] in testa ad una lista di liste:

[3]::[[6,7],[8,9]]
val it = [[3],[6,7],[8,9]] : int list list

\subsubsection{Accedere le liste}

null(x) : 'a list -> bool
hd(x) : 'a list -> 'a
tl(x) : 'a list -> 'a list

\subsubsection{Funzioni delle liste}

(*somma gli elementi di una lista*)
fun sum_list (xs : int list) =
	if (null xs) then
		0
	else
		(hd xs) + sum_list(tl xs);

val sum_list = fn : int list -> int

sum_list [3,4,5];
val it = 12 : int

(* [7,6,5,4,3,2,1] *)
fun  countdown (x : int) =
	if (x = 0) then
		[]
	else
		x :: countdown(x - 1);

val countdown = fn : int -> int list

fun append (xs : int list, ys : int list) =
	if (null xs) then
		ys
	else
		(hd xs) :: append((tl xs), ys);

val append = fn : (int list) * (int list) -> int list

Recursion Again

Le funzioni sulle liste di solito sono ricorsive, questo è l'unico modo per ``arrivare a tutti gli elementi''.

Quando implementiamo una funzione sulle liste dovremmo domandarci
\begin{quote}
Quale dovrebbe essere la risposta per la lista vuota?\\
Quale dovrebbe essere la risposta per la lista non-vuota?
\end{quote}
La risposta alla seconda domanda è tipicamente in termini della coda (\texttt{tl}) della lista.

Similarmente funzioni che producono liste -- di qualsiasi grandezza -- saranno ricorsive.
Qual è l'idea di fondo? Creare lista da liste ancora più piccole!

\subsection{L'espressione let}

Quel che non sappiamo ancora fare è come definire variabili locali, cioè dichiarare delle variabili che possono essere utilizzate soltanto all'interno della funzione nella quale sono dichiarate, ossia limitare la visibilità.
Questo modo di procedere rappresenta un buona pratica nello scrivere codice ed è estremamente conveniente.
Vedremo che possiamo usare lo stesso costrutto per dichiarare una funzione all'interno di un'altra funzione, che è una di gran lunga una buona idea che si bene in troppi pochi linguaggi.
Dopodiché discuteremo l'efficienza e dove è presente la necessità delle variabili locali e dei \foreign{let bindings} in modo da scrivere algoritmi efficienti.

Facciamo qualche esempio solo per il vedere quali nuove funzionalità ci permette di avere il costrutto \texttt{let}, senza l'obiettivo di produrre un output particolare.

fun silly1 (z : int) =
	let
		val x = if (z > 0) then z else 34
		val y = x + z + 9
	in
		if (x > y) then x * 2 else y * y
	end;

Enfatizziamo il fatto che le espressioni let possono essere messe dappertutto

fun silly2 () =
	let
		val x = 1
	in
		(let val x = 2 in x + 1 end) + (let val y = x + 2 in y + 1 end)
	end;

\smlinline{let val x = 2 in x + 1 end} crea un ambiente differente dove la x dichiarata oscura la x dichiarata precedentemente.
Quando andremo a valutare il corpo (\texttt{x + 1}) il valore della x sarà quello dichiarato, valutando quindi l'espressione al valore 3.
Nota bene che la x dichiarata all'interno del costrutto let non influenza in nessun modo il valore della prima, ma la nasconde (tramite il fenomeno di \foreign{shadowing}).

Mentre la \texttt{x} richiamata nel secondo \texttt{let} statemente si riferisce alla prima \texttt{x} dichiarata (non c'è \foreign{shadowing}), dal valore 1, quindi l'espressione \texttt{y + 1} verrà valutata a \texttt{4}.

\begin{quote}
Quindi cosa c'è di nuovo?
\end{quote}

Il costrutto let ci dà la possibilità di definire la visibilità (\foreign{scoping}) delle variabili definite nell'ambiente locale.

Abbiamo detto che quando si effettua un \foreign{binding} fra un valore di una variabile, quel binding rimarrà attivo nell'ambiente per il resto del file a meno che non sia oscurato da un altro \foreign{binding}.
Ma ora, con le espressione \texttt{let}, quando dichiariamo un binding al loro interno, sono visibili \emph{solamente} per i \foreign{binding} che vengono dopo e per il corpo dei quella espressione \texttt{let}, e da nessun'altra parte.

Questo ci dà una forte idea di variabili locali.
Ogni volta che abbiamo un'\foreign{binding} possiamo introdurre un ambiente locale con una let expression per avere dei binding per solo quella espressione.
E tutto questo introducendo un semplice costrutto.

\subsection{Funzioni innestate}

Restituisce una lista con all'interno i numeri compresi fra quelli dati in input.

1a Implementazione

fun count (from : int, to : int)
	if (from = to) then
		to::[]
	else
		from :: count(from + 1, to)

fun countup_from1(x : int) =
	count(1,x)

fun count (from : int, to : int)
	if (from = to) then to::[]
	else from :: count(from + 1, to)

2a Implementazione

fun countup_from1(x : int) =
	let
		fun count (from : int, to : int)
			if (from = to) then
				to::[]
			else
				from :: count(from + 1, to)
	in
		count(1,x)
	end

3a implementazione

fun countup_from1(x : int) =
	let
		fun count (from : int)
			if (from = x) then
				x::[]
			else
				from :: count(from + 1)
	in
		count(1)
	end

Let and efficiency

fun good_max (xs : int list) =
	if null xs then
		0 (*horrible style; fix later*)
	else
		if (null (tl xs)) then
			hd xs
		else
			let
				val tl_ans = good_max(tl xs)
			in
				if (hd xs > tl_ans) then
					hd xs
				else
					tl_ans
			end

Boolean Operations

andalso		&&
orelse		||
not			!

Nota che not è una funzione.

not
val it = fn : bool -> bool

Mentre andalso e orelse non lo sono.

Puntualizziamo che se un linguaggio ha l'istruzione if-then-else non ha bisogno di andalso, orelse e not. Poiché le istruzioni possono essere ricritte equivalentemente tramite il costrutto if-then-else, ma questo viene considerato un cattivo stile perché le istruzioni andalso, orelse e not sono di più immediata comprensione.

Comparison operators

= <> > < >= <=

Due appunti:
\item Non puoi usare gli operatori > < >= <= fra interi e reali e viceversa
\item Non puoi usare gli operatori = <> sui reali
